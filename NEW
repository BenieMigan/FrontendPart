import React, { useState } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import axios from 'axios';

function StageForm() {
  const [formData, setFormData] = useState({
    civilite: '',
    nom: '',
    prenom: '',
    email: '',
    contactUrgent: '',
    directions: [],
    cv: null,
    lettre: null,
    consentement: false,
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState(null);
  const [submitSuccess, setSubmitSuccess] = useState(false);

  const directions = [
    'Direction des infrastructures',
    'Direction commerciale et du marketing',
    'Direction des Operations Portuaires et de la sécurité',
    'Direction du controle des marchés Publics',
    'Direction de l\'Administration et des Finances',
    'Direction des Marchés Publics',
    'Capitainerie du Port',
    'Direction de l\'Audit Interne et du Contrôle Financier',
    'Département des Ressources Humaines',
    'Département des Systèmes d\'information',
    'Département Qualité Santé Environnement',
    'Direction des Affaires Juridiques et du Contentieux',
    'Direction Générale',
  ];

  const handleCancel = () => {
    if (window.confirm('Voulez-vous vraiment annuler ? Les données seront perdues.')) {
      resetForm();
    }
  };

  const resetForm = () => {
    setFormData({
      civilite: '',
      nom: '',
      prenom: '',
      email: '',
      contactUrgent: '',
      directions: [],
      cv: null,
      lettre: null,
      consentement: false,
    });
    setSubmitError(null);
    setSubmitSuccess(false);
  };

  const handleChange = (e) => {
    const { name, value, type, checked, files } = e.target;

    if (type === 'checkbox' && name === 'directions') {
      let updated = [...formData.directions];
      if (checked) {
        if (updated.length < 3) updated.push(value);
      } else {
        updated = updated.filter((d) => d !== value);
      }
      setFormData({ ...formData, directions: updated });
    } else if (type === 'checkbox') {
      setFormData({ ...formData, [name]: checked });
    } else if (type === 'file') {
      setFormData({ ...formData, [name]: files[0] });
    } else {
      setFormData({ ...formData, [name]: value });
    }
  };

  const validateForm = () => {
    if (!formData.consentement) {
      setSubmitError("Vous devez accepter les conditions de traitement des données");
      return false;
    }
    if (formData.directions.length === 0) {
      setSubmitError("Veuillez sélectionner au moins une direction");
      return false;
    }
    if (!formData.cv || !formData.lettre) {
      setSubmitError("Veuillez joindre tous les fichiers requis");
      return false;
    }
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitError(null);
    setSubmitSuccess(false);

    if (!validateForm()) return;

    setIsSubmitting(true);

    try {
      const formDataToSend = new FormData();
      
      // Ajout des champs texte
      formDataToSend.append('civilite', formData.civilite);
      formDataToSend.append('nom', formData.nom);
      formDataToSend.append('prenom', formData.prenom);
      formDataToSend.append('email', formData.email);
      formDataToSend.append('contactUrgent', formData.contactUrgent);
      formDataToSend.append('consentement', formData.consentement);
      
      // Ajout des directions (un élément par direction)
      formData.directions.forEach(direction => {
        formDataToSend.append('directions', direction);
      });
      
      // Ajout des fichiers
      formDataToSend.append('cv', formData.cv);
      formDataToSend.append('lettre', formData.lettre);

      // Envoi sans spécifier le Content-Type (il sera automatiquement défini avec le boundary)
      const response = await axios.post('http://localhost:8080/api/demandes', formDataToSend);

      if (response.status === 200) {
        setSubmitSuccess(true);
        resetForm();
      }
    } catch (error) {
      console.error('Erreur complète:', error);
      setSubmitError(error.response?.data?.message || "Une erreur est survenue lors de l'envoi du formulaire");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container mt-5">
      <form onSubmit={handleSubmit} className="border p-4 rounded shadow" encType="multipart/form-data">
        <h2 className="text-center mb-4">Demande de Stage</h2>

        {submitError && (
          <div className="alert alert-danger mb-4">
            {submitError}
          </div>
        )}

        {submitSuccess && (
          <div className="alert alert-success mb-4">
            Votre demande a été envoyée avec succès !
          </div>
        )}

        {/* Civilité */}
        <div className="mb-3">
          <label className="form-label">Civilité:</label>
          <div className="d-flex gap-3">
            {['M', 'Mme', 'Mlle'].map((civilite) => (
              <div key={civilite}>
                <input
                  type="radio"
                  name="civilite"
                  value={civilite}
                  onChange={handleChange}
                  checked={formData.civilite === civilite}
                  required
                /> {civilite}
              </div>
            ))}
          </div>
        </div>

        {/* Nom & Prénom */}
        <div className="row mb-3">
          <div className="col-md-6">
            <label className="form-label">Nom *</label>
            <input
              type="text"
              name="nom"
              value={formData.nom}
              onChange={handleChange}
              required
              className="form-control"
            />
          </div>
          <div className="col-md-6">
            <label className="form-label">Prénom(s) *</label>
            <input
              type="text"
              name="prenom"
              value={formData.prenom}
              onChange={handleChange}
              required
              className="form-control"
            />
          </div>
        </div>

        {/* Email & Contact */}
        <div className="row mb-3">
          <div className="col-md-6">
            <label className="form-label">Adresse Mail *</label>
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              required
              className="form-control"
            />
          </div>
          <div className="col-md-6">
            <label className="form-label">Contact Urgent *</label>
            <input
              type="tel"
              name="contactUrgent"
              value={formData.contactUrgent}
              onChange={handleChange}
              required
              className="form-control"
            />
          </div>
        </div>

        {/* Directions */}
        <div className="mb-3">
          <p>Choix de 3 directions maximum:</p>
          <div className="row">
            {directions.map((dir) => (
              <div key={dir} className="col-md-6">
                <div className="form-check">
                  <input
                    type="checkbox"
                    name="directions"
                    value={dir}
                    onChange={handleChange}
                    checked={formData.directions.includes(dir)}
                    className="form-check-input"
                    disabled={formData.directions.length >= 3 && !formData.directions.includes(dir)}
                  />
                  <label className="form-check-label">{dir}</label>
                </div>
              </div>
            ))}
          </div>
          {formData.directions.length >= 3 && (
            <small className="text-muted">Vous avez atteint le maximum de directions sélectionnées</small>
          )}
        </div>

        {/* CV & Lettre */}
        <div className="row mb-3">
          <div className="col-md-6">
            <label className="form-label">CV *</label>
            <input
              type="file"
              name="cv"
              onChange={handleChange}
              required
              className="form-control"
              accept=".pdf,.doc,.docx"
            />
            {formData.cv && (
              <small className="text-muted">Fichier sélectionné: {formData.cv.name}</small>
            )}
          </div>
          <div className="col-md-6">
            <label className="form-label">Lettre de recommandation *</label>
            <input
              type="file"
              name="lettre"
              onChange={handleChange}
              required
              className="form-control"
              accept=".pdf,.doc,.docx"
            />
            {formData.lettre && (
              <small className="text-muted">Fichier sélectionné: {formData.lettre.name}</small>
            )}
          </div>
        </div>

        {/* Consentement */}
        <div className="mb-3">
          <div className="form-check">
            <input
              type="checkbox"
              name="consentement"
              checked={formData.consentement}
              onChange={handleChange}
              required
              className="form-check-input"
            />
            <label className="form-check-label">
              J'accepte que mes informations soient utilisées pour traiter ma demande de stage.
            </label>
          </div>
        </div>

        {/* Buttons */}
        <div className="d-flex justify-content-between">
          <button
            type="submit"
            className="btn btn-primary"
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Envoi en cours...' : 'Envoyer la demande'}
          </button>
          <button
            type="button"
            onClick={handleCancel}
            className="btn btn-secondary"
            disabled={isSubmitting}
          >
            Annuler
          </button>
        </div>
      </form>
    </div>
  );
}

export default StageForm;